'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('./utils');

var util = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var eitherStringOrInteger = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]);

var ReactBootstrapToggle = function (_Component) {
  _inherits(ReactBootstrapToggle, _Component);

  function ReactBootstrapToggle() {
    _classCallCheck(this, ReactBootstrapToggle);

    var _this = _possibleConstructorReturn(this, (ReactBootstrapToggle.__proto__ || Object.getPrototypeOf(ReactBootstrapToggle)).call(this));

    _this.state = { width: null, height: null };
    _this.onClick = _this.onClick.bind(_this);
    return _this;
  }

  _createClass(ReactBootstrapToggle, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.width && this.props.height) {
        return;
      }
      this.setDimensions();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.props.width && this.props.height) {
        return;
      }
      this.setDimensions();
    }
  }, {
    key: 'onClick',
    value: function onClick() {
      if (this.props.disabled) return;
      if (typeof this.props.onClick === 'function') {
        this.props.onClick(!this.props.active);
      }
    }
  }, {
    key: 'setDimensions',
    value: function setDimensions() {
      var onDim = util.getDimension(this.on);
      var offDim = util.getDimension(this.off);

      var width = Math.max(onDim.width, offDim.width);
      var height = Math.max(onDim.height, offDim.height);

      // Check if the sizes are the same with a margin of error of one pixel
      var areAlmostTheSame = util.compareWithMarginOfError(this.state.width, width) && util.compareWithMarginOfError(this.state.height, height);

      // if they are the same then return
      if (areAlmostTheSame) {
        return;
      }

      this.setState({
        width: width,
        height: height
      });
    }
  }, {
    key: 'getSizeClass',
    value: function getSizeClass() {
      if (this.props.size === 'lg') return 'btn-lg';
      if (this.props.size === 'sm') return 'btn-sm';
      if (this.props.size === 'xs') return 'btn-xs';
      return 'btn-md';
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var onstyle = 'btn-' + this.props.onstyle;
      var offstyle = 'btn-' + this.props.offstyle;
      var sizeClass = this.getSizeClass();
      var activeClass = 'btn toggle ' + sizeClass + ' ' + onstyle;
      var inactiveClass = 'btn toggle ' + sizeClass + ' ' + offstyle + ' off';
      var onStyleClass = 'btn toggle-on ' + sizeClass + ' ' + onstyle;
      var offStyleClass = 'btn toggle-off ' + sizeClass + ' ' + offstyle;

      var style = {};
      var className = this.props.active ? activeClass : inactiveClass;
      if (this.props.width && this.props.height) {
        style = {
          width: this.props.width,
          height: this.props.height
        };
      } else {
        style = {
          width: this.state.width,
          height: this.state.height
        };
      }

      if (this.props.className) {
        className += ' ' + this.props.className;
      }

      return (
        // eslint-disable-next-line jsx-a11y/no-static-element-interactions
        _react2.default.createElement(
          'div',
          {
            role: 'button',
            id: this.props.id,
            disabled: this.props.disabled,
            className: className,
            onClick: this.onClick,
            style: style

          },
          _react2.default.createElement(
            'div',
            { className: 'toggle-group' },
            _react2.default.createElement(
              'span',
              {
                ref: function ref(onLabel) {
                  _this2.on = onLabel;
                },
                className: onStyleClass,
                disabled: this.props.disabled
              },
              this.props.on
            ),
            _react2.default.createElement(
              'span',
              {
                ref: function ref(offLabel) {
                  _this2.off = offLabel;
                },
                className: offStyleClass,
                disabled: this.props.disabled
              },
              this.props.off
            ),
            _react2.default.createElement('span', { disabled: this.props.disabled, className: 'toggle-handle btn btn-' + this.props.handlestyle + ' ' + sizeClass })
          )
        )
      );
    }
  }]);

  return ReactBootstrapToggle;
}(_react.Component);

ReactBootstrapToggle.propTypes = {
  // Holds the className for label one
  onstyle: _propTypes2.default.string,
  // Holds the className for label two
  offstyle: _propTypes2.default.string,
  // The className for the handle
  handlestyle: _propTypes2.default.string,
  // Height prop
  height: eitherStringOrInteger,
  // Width prop
  width: eitherStringOrInteger,
  // The on and off elements defaults to 'On' and 'Off'
  on: _propTypes2.default.node,
  off: _propTypes2.default.node,
  // The initial state of the component
  active: _propTypes2.default.bool,
  // Sets the button to disabled
  disabled: _propTypes2.default.bool,
  // Set the size of the button defaults to normal
  size: _propTypes2.default.string,
  // The onClick event, returns the state as the argument
  onClick: _propTypes2.default.func,
  id: _propTypes2.default.string,
  className: _propTypes2.default.string
};
ReactBootstrapToggle.defaultProps = {
  onstyle: 'primary',
  offstyle: 'default',
  handlestyle: 'default',
  width: '',
  height: '',
  on: 'On',
  off: 'Off',
  disabled: false,
  size: 'normal',
  active: true
};
exports.default = ReactBootstrapToggle;